<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李特个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.litede.cn/"/>
  <updated>2019-10-24T09:00:25.959Z</updated>
  <id>http://www.litede.cn/</id>
  
  <author>
    <name>李特</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>String类常用方法源码分析</title>
    <link href="http://www.litede.cn/2019/10/24/String%E7%B1%BB%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://www.litede.cn/2019/10/24/String类常用方法源码分析/</id>
    <published>2019-10-24T05:48:58.000Z</published>
    <updated>2019-10-24T09:00:25.959Z</updated>
    
    <content type="html"><![CDATA[<p>环境: JDK8</p><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><p>先看String类的定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public final class String</span><br><span class="line">    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence</span><br></pre></td></tr></table></figure><p>可以看到String类被final修饰,因此不能被继承.String类还实现了序列化接口Serializable,可比较的接口Comparable并指定泛型String,该接口必须实现int compareTo方法,最后还实现了字符序列CharSequence的接口,该接口常用的方法如chatAt(int index),length(),toString()等等.</p><h1 id="构造字符串"><a href="#构造字符串" class="headerlink" title="构造字符串"></a>构造字符串</h1><p>String类的无参构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Initializes a newly created &#123;@code String&#125; object so that it represents</span><br><span class="line">     * an empty character sequence.  Note that use of this constructor is</span><br><span class="line">     * unnecessary since Strings are immutable.</span><br><span class="line">     */</span><br><span class="line">public String() &#123;</span><br><span class="line">        this.value = &quot;&quot;.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中value定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/** The value is used for character storage. */</span><br><span class="line">   private final char value[];</span><br></pre></td></tr></table></figure><p>该构造函数创建了一个空的字符换并存在字符数组value中.</p><p>再看看一个有参的构造函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Allocates a new &#123;@code String&#125; so that it represents the sequence of</span><br><span class="line">     * characters currently contained in the character array argument. The</span><br><span class="line">     * contents of the character array are copied; subsequent modification of</span><br><span class="line">     * the character array does not affect the newly created string.</span><br><span class="line">     *</span><br><span class="line">     * @param  value</span><br><span class="line">     *         The initial value of the string</span><br><span class="line">     */</span><br><span class="line">    public String(char value[]) &#123;</span><br><span class="line">        this.value = Arrays.copyOf(value, value.length);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li>该构造函数指定一个字符数组来创建一个字符序列,是通过Arrays的copyOf方法将字符数组拷贝到当前数组.</li></ol><p><strong>这样当修改字符数组的子串时,不会影响新字符数组.</strong></p><p>下面经过一个简单的测试来验证下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">       char[] c1 = &#123;&apos;a&apos;, &apos;b&apos;&#125;;</span><br><span class="line">       char[] c2 = c1;</span><br><span class="line">       for (int i = 0; i &lt; c1.length; i++) &#123;</span><br><span class="line">           if (i==1)&#123;</span><br><span class="line">               c1[1]=&apos;c&apos;;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       for (char c : c1) &#123;</span><br><span class="line">           System.out.println(&quot;c1:&quot;+c);</span><br><span class="line">       &#125;</span><br><span class="line">       for (char c : c2) &#123;</span><br><span class="line">           System.out.println(&quot;c2:&quot;+c);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c1:a</span><br><span class="line">c1:c</span><br><span class="line">c2:a</span><br><span class="line">c2:c</span><br></pre></td></tr></table></figure><p>由上可知,在c1赋值给c2后,改变了c1中的值c2的值也会随之变化,这显然与我们想要的相悖,所以才会使用拷贝的方式,将c1与c2分开.</p><p>经过以上分析可以看出,下面两个语句是等价的,因为String类底层使用char[]数组来存储字符序列.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char data[] = &#123;&apos;a&apos;, &apos;b&apos;, &apos;c&apos;&#125;;</span><br><span class="line">String str = new String(data);</span><br></pre></td></tr></table></figure><ol start="2"><li>string.value.length的代码等价于string.length<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int length() &#123;</span><br><span class="line">        return value.length;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="使用字节数组构造一个String"><a href="#使用字节数组构造一个String" class="headerlink" title="使用字节数组构造一个String"></a>使用字节数组构造一个String</h1><p>在Java中，String实例中保存有一个char[]字符数组，char[]字符数组是以unicode码来存储的，String 和 char 为内存形式，byte是网络传输或存储的序列化形式。所以在很多传输和存储的过程中需要将byte[]数组和String进行相互转化。所以，String提供了一系列重载的构造方法来将一个字符数组转化成String，提到byte[]和String之间的相互转换就不得不关注编码问题。</p><p>String(byte[] bytes, Charset charset) 是指通过charset来解码指定的byte数组，将其解码成unicode的char[]数组，够造成新的String。</p><p>这里的bytes字节流是使用charset进行编码的，想要将他转换成unicode的char[]数组，而又保证不出现乱码，那就要指定其解码方式。</p><p>如果我们在使用byte[]构造String的时候，使用的是下面这四种构造方法(带有charsetName或者charset参数)的一种的话，那么就会使用StringCoding.decode方法进行解码，使用的解码的字符集就是我们指定的charsetName或者charset。 我们在使用byte[]构造String的时候，如果没有指明解码使用的字符集的话，那么StringCoding的decode方法首先调用系统的默认编码格式，如果没有指定编码格式则默认使用ISO-8859-1编码格式进行编码操作。主要体现代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">static byte[] encode(String charsetName, char[] ca, int off, int len)</span><br><span class="line">        throws UnsupportedEncodingException</span><br><span class="line">    &#123;</span><br><span class="line">        StringEncoder se = deref(encoder);</span><br><span class="line">        String csn = (charsetName == null) ? &quot;ISO-8859-1&quot; : charsetName;</span><br><span class="line">        if ((se == null) || !(csn.equals(se.requestedCharsetName())</span><br><span class="line">                              || csn.equals(se.charsetName()))) &#123;</span><br><span class="line">            se = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                Charset cs = lookupCharset(csn);</span><br><span class="line">                if (cs != null)</span><br><span class="line">                    se = new StringEncoder(cs, csn);</span><br><span class="line">            &#125; catch (IllegalCharsetNameException x) &#123;&#125;</span><br><span class="line">            if (se == null)</span><br><span class="line">                throw new UnsupportedEncodingException (csn);</span><br><span class="line">            set(encoder, se);</span><br><span class="line">        &#125;</span><br><span class="line">        return se.encode(ca, off, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是编码清单，下面是解码清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">static char[] decode(String charsetName, byte[] ba, int off, int len)</span><br><span class="line">        throws UnsupportedEncodingException</span><br><span class="line">    &#123;</span><br><span class="line">        StringDecoder sd = deref(decoder);</span><br><span class="line">        String csn = (charsetName == null) ? &quot;ISO-8859-1&quot; : charsetName;</span><br><span class="line">        if ((sd == null) || !(csn.equals(sd.requestedCharsetName())</span><br><span class="line">                              || csn.equals(sd.charsetName()))) &#123;</span><br><span class="line">            sd = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                Charset cs = lookupCharset(csn);</span><br><span class="line">                if (cs != null)</span><br><span class="line">                    sd = new StringDecoder(cs, csn);</span><br><span class="line">            &#125; catch (IllegalCharsetNameException x) &#123;&#125;</span><br><span class="line">            if (sd == null)</span><br><span class="line">                throw new UnsupportedEncodingException(csn);</span><br><span class="line">            set(decoder, sd);</span><br><span class="line">        &#125;</span><br><span class="line">        return sd.decode(ba, off, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="charAt"><a href="#charAt" class="headerlink" title="charAt"></a>charAt</h2><p>再看charAt（int index）方法源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public char charAt(int index) &#123;</span><br><span class="line">        if ((index &lt; 0) || (index &gt;= value.length)) &#123;</span><br><span class="line">            throw new StringIndexOutOfBoundsException(index);</span><br><span class="line">        &#125;</span><br><span class="line">        return value[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法返回字符序列中下标为index的字符。并且index的范围：(0,value.length].</p><h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p>先看源码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public String concat(String str) &#123;</span><br><span class="line">        int otherLen = str.length(); //取得str字符串长度</span><br><span class="line">        if (otherLen == 0) &#123; //如果传入的字符串内容为空，则返回原字符串</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        int len = value.length; //取得原字符串内容的长度</span><br><span class="line">        char buf[] = Arrays.copyOf(value, len + otherLen); //复制字符串的内容到char数组，并扩展长度</span><br><span class="line">        str.getChars(buf, len); //将str的内容复制到buf数组中，位置从len开始。在这一步完成两个字符串的拼接</span><br><span class="line">        return new String(buf, true); //将buf数组转化为新的String实例并返回</span><br><span class="line">    &#125;</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">步骤含义基本都在上面,这里着重描述一下getChars方法</span><br></pre></td></tr></table></figure><p>void getChars(char dst[], int dstBegin) {<br>        System.arraycopy(value, 0, dst, dstBegin, value.length);<br>    }</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可以看出,链接字符换操作实际是字符串的拷贝.最后返回连接成功后的字符串.</span><br><span class="line"></span><br><span class="line">最后是一个特殊的私有包范围类型的构造方法，String除了提供了很多公有的供程序员使用的构造方法以外，还提供了一个包范围类型的构造方法（Jdk 8），我们看一下他是怎么样的：</span><br></pre></td></tr></table></figure><p>String(char[] value, boolean share) {<br>        // assert share : “unshared not supported”;<br>        this.value = value;<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">从代码中我们可以看出，该方法和 String(char[] value)有两点区别：</span><br><span class="line"></span><br><span class="line">1. 第一个，该方法多了一个参数： boolean share，其实这个参数在方法体中根本没被使用，也给了注释，目前不支持使用false，只使用true。那么可以断定，加入这个share的只是为了区分于String(char[] value)方法，不加这个参数就没办法定义这个函数，只有参数不能才能进行重载。</span><br><span class="line"></span><br><span class="line">2. 第二个区别就是具体的方法实现不同。</span><br><span class="line"></span><br><span class="line">![在这里插入图片描述](https://img-blog.csdnimg.cn/20191024145625743.png)</span><br><span class="line">那么也就是说，这个方法构造出来的String和参数传过来的char[] value共享同一个数组。 那么，为什么Java会提供这样一个方法呢？</span><br><span class="line"></span><br><span class="line"> 首先，我们分析一下使用该构造函数的好处：</span><br><span class="line"></span><br><span class="line"> 1. 首先，性能好，这个很简单，一个是直接给数组赋值（相当于直接将String的value的指针指向char[]数组），一个是逐一拷贝。当然是直接赋值快了。</span><br><span class="line"></span><br><span class="line">2. 其次，共享内部数组节约内存。</span><br><span class="line"></span><br><span class="line">3. 该方法之所以设置为包范围，是因为一旦该方法设置为公有，在外面可以访问的话，那就破坏了字符串的不可变性。</span><br><span class="line"></span><br><span class="line">## subString</span><br><span class="line">substring有两个重载方法：</span><br></pre></td></tr></table></figure><p>public String substring(int beginIndex) {<br>        if (beginIndex &lt; 0) {<br>            throw new StringIndexOutOfBoundsException(beginIndex);<br>        }<br>        int subLen = value.length - beginIndex;<br>        if (subLen &lt; 0) {<br>            throw new StringIndexOutOfBoundsException(subLen);<br>        }<br>        return (beginIndex == 0) ? this : new String(value, beginIndex, subLen);<br>    }</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>public String substring(int beginIndex, int endIndex) {<br>        if (beginIndex &lt; 0) {<br>            throw new StringIndexOutOfBoundsException(beginIndex);<br>        }<br>        if (endIndex &gt; value.length) {<br>            throw new StringIndexOutOfBoundsException(endIndex);<br>        }<br>        int subLen = endIndex - beginIndex;<br>        if (subLen &lt; 0) {<br>            throw new StringIndexOutOfBoundsException(subLen);<br>        }<br>        return ((beginIndex == 0) &amp;&amp; (endIndex == value.length)) ? this<br>                : new String(value, beginIndex, subLen);<br>    }</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这两个重载方法都是先计算要截取的子串长度，判断边界最后返回调用new String(value, beginIndex, subLen)方法，我们来看一下这个方法：</span><br></pre></td></tr></table></figure><p>public String(char value[], int offset, int count) {<br>        if (offset &lt; 0) {<br>            throw new StringIndexOutOfBoundsException(offset);<br>        }<br>        if (count &lt;= 0) {<br>            if (count &lt; 0) {<br>                throw new StringIndexOutOfBoundsException(count);<br>            }<br>            if (offset &lt;= value.length) {<br>                this.value = “”.value;<br>                return;<br>            }<br>        }<br>        // Note: offset or count might be near -1&gt;&gt;&gt;1.<br>        if (offset &gt; value.length - count) {<br>            throw new StringIndexOutOfBoundsException(offset + count);<br>        }<br>        this.value = Arrays.copyOfRange(value, offset, offset+count);<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">offset指第一个匹配的字符序列的索引，count指子串的长度。</span><br><span class="line">最终该子串会被拷贝到字符数组value中，并且后续的字符数组的修改并不影响新创建的字符串。</span><br><span class="line"></span><br><span class="line">## contains</span><br><span class="line"></span><br><span class="line">先看一下源码:</span><br></pre></td></tr></table></figure><p>public boolean contains(CharSequence s) {<br>        return indexOf(s.toString()) &gt; -1;<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以看出,直接调用indexOf方法:</span><br></pre></td></tr></table></figure><p>public int indexOf(String str) {<br>        return indexOf(str, 0);<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">  public int indexOf(String str, int fromIndex) &#123;</span><br><span class="line">        return indexOf(value, 0, value.length,</span><br><span class="line">                str.value, 0, str.value.length, fromIndex);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">static int indexOf(char[] source, int sourceOffset, int sourceCount,</span><br><span class="line">            char[] target, int targetOffset, int targetCount,</span><br><span class="line">            int fromIndex) &#123;</span><br><span class="line">        if (fromIndex &gt;= sourceCount) &#123;</span><br><span class="line">            return (targetCount == 0 ? sourceCount : -1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (fromIndex &lt; 0) &#123;</span><br><span class="line">            fromIndex = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        if (targetCount == 0) &#123;</span><br><span class="line">            return fromIndex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        char first = target[targetOffset];</span><br><span class="line">        int max = sourceOffset + (sourceCount - targetCount);</span><br><span class="line"></span><br><span class="line">        for (int i = sourceOffset + fromIndex; i &lt;= max; i++) &#123;</span><br><span class="line">            /* Look for first character. */</span><br><span class="line">            if (source[i] != first) &#123;</span><br><span class="line">                while (++i &lt;= max &amp;&amp; source[i] != first);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            /* Found first character, now look at the rest of v2 */</span><br><span class="line">            if (i &lt;= max) &#123;</span><br><span class="line">                int j = i + 1;</span><br><span class="line">                int end = j + targetCount - 1;</span><br><span class="line">                for (int k = targetOffset + 1; j &lt; end &amp;&amp; source[j]</span><br><span class="line">                        == target[k]; j++, k++);</span><br><span class="line"></span><br><span class="line">                if (j == end) &#123;</span><br><span class="line">                    /* Found whole string. */</span><br><span class="line">                    return i - sourceOffset;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">```  </span><br><span class="line">首先判断开始索引如果大于源字符串则返回，若目标字符串长度为0返回源字符串长度，否则返回-1.</span><br><span class="line"></span><br><span class="line">然后迭代查找字符，若全部源字符串都找到则返回第一个匹配的索引，否则返回-1.</span><br><span class="line">所以在public boolean contains(CharSequence s)方法中，若indexOf方法返回-1则返回false，否则返回true。</span><br><span class="line"></span><br><span class="line">## equals</span><br><span class="line"></span><br><span class="line">源码:</span><br></pre></td></tr></table></figure><p>public boolean equals(Object anObject) {<br>        if (this == anObject) {<br>            return true;<br>        }<br>        if (anObject instanceof String) {<br>            String anotherString = (String)anObject;<br>            int n = value.length;<br>            if (n == anotherString.value.length) {<br>                char v1[] = value;<br>                char v2[] = anotherString.value;<br>                int i = 0;<br>                while (n– != 0) {<br>                    if (v1[i] != v2[i])<br>                        return false;<br>                    i++;<br>                }<br>                return true;<br>            }<br>        }<br>        return false;<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">该方法首先判断this == anObject ？，也就是说判断要比较的对象和当前对象是不是同一个对象，如果是直接返回true，如不是再继续比较，然后在判断anObject是不是String类型的，如果不是，直接返回false,如果是再继续比较，到了能终于比较字符数组的时候，他还是先比较了两个数组的长度，不一样直接返回false，一样再逐一比较值。</span><br><span class="line"></span><br><span class="line">## join</span><br></pre></td></tr></table></figure><p>public static String join(CharSequence delimiter, CharSequence… elements) {<br>        Objects.requireNonNull(delimiter);<br>        Objects.requireNonNull(elements);<br>        // Number of elements not likely worth Arrays.stream overhead.<br>        StringJoiner joiner = new StringJoiner(delimiter);<br>        for (CharSequence cs: elements) {<br>            joiner.add(cs);<br>        }<br>        return joiner.toString();<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. **StringJoiner 类也是jdk1.8开始加入的通过分隔符或前缀或后缀来构造字符串的，底层是字符序列的拷贝。**</span><br><span class="line"></span><br><span class="line">2. requireNonNull方法校验参数不能为空,否则抛异常.源码:</span><br></pre></td></tr></table></figure><p>public static <t> T requireNonNull(T obj) {<br>        if (obj == null)<br>            throw new NullPointerException();<br>        return obj;<br>}<br>```</t></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境: JDK8&lt;/p&gt;
&lt;h1 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h1&gt;&lt;p&gt;先看String类的定义&lt;/p&gt;
&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="java" scheme="http://www.litede.cn/categories/java/"/>
    
    
      <category term="java" scheme="http://www.litede.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>static关键字详解</title>
    <link href="http://www.litede.cn/2019/10/23/static%E5%85%B3%E9%94%AE%E5%AD%97%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.litede.cn/2019/10/23/static关键字详解/</id>
    <published>2019-10-23T06:51:18.000Z</published>
    <updated>2019-10-23T08:06:44.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="static关键字的用途"><a href="#static关键字的用途" class="headerlink" title="static关键字的用途"></a>static关键字的用途</h1><blockquote><p>static方法就是没有this的方法。在static方法内部不能调用非静态方法，反过来是可以的。而且可以在没有创建任何对象的前提下，仅仅通过类本身来调用static方法。这实际上正是static方法的主要用途    </p></blockquote><p> — 摘自&lt;&lt;java编程思想&gt;&gt;</p><p>这段话用一句话来描述就是: <strong>方便在没有创建对象的情况下来进行调用(方法/变量)</strong></p><p>很显然，被static关键字修饰的方法或者变量不需要依赖于对象来进行访问，只要类被加载了，就可以通过类名去进行访问。</p><p>　　static可以用来修饰类的成员方法、类的成员变量，另外可以编写static代码块来优化程序性能。</p><ol><li>static修饰方法</li></ol><p>static方法一般称作静态方法，由于静态方法不依赖于任何对象就可以进行访问，因此对于静态方法来说，是没有this的，因为它不依附于任何对象，既然都没有对象，就谈不上this了。并且由于这个特性，在静态方法中不能访问类的非静态成员变量和非静态成员方法，因为非静态成员方法/变量都是必须依赖具体的对象才能够被调用。</p><p>但是要注意的是，虽然在静态方法中不能访问非静态成员方法和非静态成员变量，但是在非静态成员方法中是可以访问静态成员方法/变量的。<br><img src="https://img-blog.csdnimg.cn/2019102315042990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>此时可以看到,静态方法print2不能访问非静态变量与非静态方法.而非静态方法print1可以不需要new直接访问print2方法.</p><p>由此可以看出,print2方法时独立于对象存在的,可以直接通过类名调用.例如: Class.print2();</p><ol start="2"><li>static修饰变量</li></ol><p>static变量也成为静态变量,静态变量和非静态变量的区别是:静态变量被所有的对象所共享,在内存中只有一个副本,它当且仅当在类初次加载时会被初始化.而非静态变量所拥有的,在创建对象的时候被初始化,存在多个副本,各个对象拥有的副本互不影响.</p><p>static成员变量的初始化顺序按照定义的顺序进行初始化.</p><ol start="3"><li>static修饰代码块<br>static关键字还有一个比较关键的作用就是<strong>用来形成静态代码块以优化程序性能</strong>. static块可以置于类中的任何地方,类中可以有多个static块.在类初次加载时,会按照static块ed顺序来执行每个static块,并且只执行一次.</li></ol><p>为什么说static块可以用来优化程序性能，是因为它的特性:只会在类加载的时候执行一次。下面看个例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    private Date birthDate;</span><br><span class="line">     </span><br><span class="line">    public Person(Date birthDate) &#123;</span><br><span class="line">        this.birthDate = birthDate;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    boolean isBornBoomer() &#123;</span><br><span class="line">        Date startDate = Date.valueOf(&quot;1946&quot;);</span><br><span class="line">        Date endDate = Date.valueOf(&quot;1964&quot;);</span><br><span class="line">        return birthDate.compareTo(startDate)&gt;=0 &amp;&amp; birthDate.compareTo(endDate) &lt; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>isBornBoomer是用来这个人是否是1946-1964年出生的，而每次isBornBoomer被调用的时候，都会生成startDate和birthDate两个对象，造成了空间浪费，如果改成这样效率会更好：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    private Date birthDate;</span><br><span class="line">    private static Date startDate,endDate;</span><br><span class="line">    static&#123;</span><br><span class="line">        startDate = Date.valueOf(&quot;1946&quot;);</span><br><span class="line">        endDate = Date.valueOf(&quot;1964&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public Person(Date birthDate) &#123;</span><br><span class="line">        this.birthDate = birthDate;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    boolean isBornBoomer() &#123;</span><br><span class="line">        return birthDate.compareTo(startDate)&gt;=0 &amp;&amp; birthDate.compareTo(endDate) &lt; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　因此，很多时候会将一些只需要进行一次的初始化操作都放在static代码块中进行。</p><h1 id="static关键字误区"><a href="#static关键字误区" class="headerlink" title="static关键字误区"></a>static关键字误区</h1><ol><li>static关键字会改变类中成员的访问权限吗？</li></ol><p>ava中的static关键字不会影响到变量或者方法的作用域。在Java中能够影响到访问权限的只有private、public、protected（包括包访问权限）这几个关键字。</p><ol start="2"><li>能通过this访问静态成员变量吗？</li></ol><p>这里面主要考察队this和static的理解。this代表什么？this代表当前对象。而static变量是被对象所享有的，静态成员变量虽然独立于对象，但是不代表不可以通过对象去访问，所有的静态方法和静态变量都可以通过对象访问（只要访问权限足够）。</p><ol start="3"><li>static能作用于局部变量么？</li></ol><p>static是不允许用来修饰局部变量。不要问为什么，这是Java语法的规定。</p><h1 id="常见的面试题"><a href="#常见的面试题" class="headerlink" title="常见的面试题"></a>常见的面试题</h1><ol><li>下面这段代码的输出结果是什么？<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class Test extends Base&#123;</span><br><span class="line"> </span><br><span class="line">    static&#123;</span><br><span class="line">        System.out.println(&quot;test static&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public Test()&#123;</span><br><span class="line">        System.out.println(&quot;test constructor&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new Test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Base&#123;</span><br><span class="line">     </span><br><span class="line">    static&#123;</span><br><span class="line">        System.out.println(&quot;base static&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public Base()&#123;</span><br><span class="line">        System.out.println(&quot;base constructor&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">base static</span><br><span class="line">test static</span><br><span class="line">base constructor</span><br><span class="line">test constructor</span><br></pre></td></tr></table></figure><p>解析: </p><ol><li><p>从main方法开始执行,先加载Test类</p></li><li><p>Test类继承Base类,因此先去加载Base类,发现有static代码块,便开始执行static代码块.此时输出: <strong>base static</strong></p></li><li><p>base类加载完成后,继续加载Test类,发现Test类中也有static方法,便开始执行static代码块,此时输出: <strong>test static</strong></p></li><li><p>在加载完静态代码后,便继续执行main方法,在main方法中new Test()时会先调用父类的构造器,输出: <strong>base constructor</strong></p></li><li><p>再调用自身的构造器,输出<strong>test constructor</strong></p></li><li><p>这段代码的输出结果是什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    Person person = new Person(&quot;Test&quot;);</span><br><span class="line">    static&#123;</span><br><span class="line">        System.out.println(&quot;test static&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public Test() &#123;</span><br><span class="line">        System.out.println(&quot;test constructor&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new MyClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Person&#123;</span><br><span class="line">    static&#123;</span><br><span class="line">        System.out.println(&quot;person static&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public Person(String str) &#123;</span><br><span class="line">        System.out.println(&quot;person &quot;+str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">class MyClass extends Test &#123;</span><br><span class="line">    Person person = new Person(&quot;MyClass&quot;);</span><br><span class="line">    static&#123;</span><br><span class="line">        System.out.println(&quot;myclass static&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public MyClass() &#123;</span><br><span class="line">        System.out.println(&quot;myclass constructor&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test static</span><br><span class="line">myclass static</span><br><span class="line">person static</span><br><span class="line">person Test</span><br><span class="line">test constructor</span><br><span class="line">person MyClass</span><br><span class="line">myclass constructor</span><br></pre></td></tr></table></figure><blockquote><ol><li>先加载Test类,执行其中的static方法,输出:<strong>test static</strong></li><li>再加载MyClass类中的static方法,输出:<strong>myclass static</strong></li><li>在加载完static后,就通过构造器来生成对象.而在生成对象的时候,必须先初始化父类的成员变量,因此会执行Test中的<strong>Person person = new Person()</strong>,而Person类还没有被加载过,因此会先加载Person类中的static块,输出<strong>person static</strong></li><li>继续执行Person的构造器,输出:<strong>person Test</strong></li><li>继续执行Test类中的构造器,输出:<strong>test constructor</strong>.此时完成了父类的初始化</li><li>初始化自身,因此会继续执行MyClass中的Person person = new Person()，输出:<strong>person MyClass</strong></li><li>执行myClass中的构造器,输出:<strong>myclass constructor</strong></li></ol></blockquote><ol start="3"><li>这段代码的输出结果是什么？<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">     </span><br><span class="line">    static&#123;</span><br><span class="line">        System.out.println(&quot;test static 1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    static&#123;</span><br><span class="line">        System.out.println(&quot;test static 2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test static 1</span><br><span class="line">test static 2</span><br></pre></td></tr></table></figure><p>初始化时加载静态代码块,其余不解释</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;static关键字的用途&quot;&gt;&lt;a href=&quot;#static关键字的用途&quot; class=&quot;headerlink&quot; title=&quot;static关键字的用途&quot;&gt;&lt;/a&gt;static关键字的用途&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;static方法就是没有this的
      
    
    </summary>
    
    
      <category term="java" scheme="http://www.litede.cn/categories/java/"/>
    
    
      <category term="java" scheme="http://www.litede.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java里的构造函数</title>
    <link href="http://www.litede.cn/2019/10/23/java%E9%87%8C%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>http://www.litede.cn/2019/10/23/java里的构造函数/</id>
    <published>2019-10-23T06:26:38.000Z</published>
    <updated>2019-10-23T08:06:44.187Z</updated>
    
    <content type="html"><![CDATA[<p>Java里的构造函数(构造方法)</p><p>构造函数 ，是一种特殊的方法。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。特别的一个类可以有多个构造函数 ，可根据其参数个数的不同或参数类型的不同来区分它们,即构造函数的重载。</p><ol><li>构造函数的特点</li></ol><p>① 构造函数的主要作用是完成对象的初始化工作,如果写的类里面没有构造函数,那么编译器会默认加上一个无参数且方法体为空的构造函数,它能够把定义对象时的参数传给对象的域.意即当创建一个对象时,这个对象就被初始化,如果这是构造函数不为空,则在创建对象时就执行构造函数里面的代码.</p><p>② 构造函数的名称必须与类名相同,不包括大小写;</p><p>③ 构造函数没有返回值,也不能用void修饰,如果加上了返回值类型,那么这将使这个构造函数变成一个普<br>通的方法,在运行时将产生找不到构造方法的错误.</p><p>④ 一个类可以定义多个构造犯法,如果在定义类时没有定义构造方法,则编译系统会自动插入一个无参数的默认构造函数,这个构造器不执行任何代码</p><p>⑤ 构造方法可以重载,以参数的个数,类型,顺序区分.<br>⑥ 在函数的继承里,子类必须调用父类的构造函数.但是,子类只能继承父类的默认构造函数,如果父类没有默认构造函数,那子类不能从父类继承默认构造函数,这时子类必须使用super来实现对父类的为默认构造函数的调用.在创建对象时,先调用父类默认构造函数对对象进行初始化,然后调用子类自身定义的构造函数.</p><ol start="2"><li>针对1中的⑥进行代码展示</li></ol><p>父类:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Class &#123;</span><br><span class="line">    int age;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    Class(int age, String name) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父类中使用有参的构造方法,此时不会生成默认的无参构造方法.</p><p>子类:</p><p>我们先让子类继承父类,会产生如下报错</p><p><img src="https://img-blog.csdnimg.cn/20191023144537656.png" alt="List item"></p><p>可以看到,java让Student类中实现父类的构造方法,代码完成后是这样的:<br><img src="https://img-blog.csdnimg.cn/2019102314472796.png" alt="在这里插入图片描述"></p><p>这就是刚才说的,子类必须使用super来实现对父类的非默认构造方法的调用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java里的构造函数(构造方法)&lt;/p&gt;
&lt;p&gt;构造函数 ，是一种特殊的方法。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。特别的一个类可以有多个构造函数 ，可根据其参数个数的不同或参数类型的不同来区分它们,即构造函
      
    
    </summary>
    
    
      <category term="java" scheme="http://www.litede.cn/categories/java/"/>
    
    
      <category term="java" scheme="http://www.litede.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>vps搭建shadowsocks</title>
    <link href="http://www.litede.cn/2019/10/23/vps%E6%90%AD%E5%BB%BAshadowsocks/"/>
    <id>http://www.litede.cn/2019/10/23/vps搭建shadowsocks/</id>
    <published>2019-10-23T02:24:28.000Z</published>
    <updated>2019-10-23T03:16:12.194Z</updated>
    
    <content type="html"><![CDATA[<p><strong>出于程序员的本能，我尝试在外网上搭建了一个VPN（搭建成功后就删除了，证明自己搭建成功过就满足了），现在记录一下步骤</strong></p><p>一、 购买服务器 </p><pre><code>经过筛选，我选择了vultr服务器，每月5美元，建议地址选Tokyo，操作系统选centos7，最好不要选8，配置选最小即可，然后部署服务器</code></pre><p>二、 部署shadowsocks</p><pre><code>这里使用的是秋水逸冰的Python版一键安装脚本，使用方法如下：1. 使用root用户，运行如下命令</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class="line">chmod +x shadowsocks.sh</span><br><span class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure><p>其中需要输入一些信息如IP、Port、password等，均可自己定义</p><p>安装完成后，脚本提示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> Congratulations, Shadowsocks-python server install completed!</span><br><span class="line">Your Server IP        :your_server_ip</span><br><span class="line">Your Server Port      :your_server_port</span><br><span class="line">Your Password         :your_password</span><br><span class="line">Your Encryption Method:your_encryption_method</span><br><span class="line"></span><br><span class="line">Welcome to visit:https://teddysun.com/342.html</span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure><p>单用户配置文件示例：<br>配置文件路径：/etc/shadowsocks.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server_port&quot;:your_server_port,</span><br><span class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;your_password&quot;,</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;your_encryption_method&quot;,</span><br><span class="line">    &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多用户多端口配置文件示例：<br>配置文件路径：/etc/shadowsocks.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;port_password&quot;:&#123;</span><br><span class="line">         &quot;8989&quot;:&quot;password0&quot;,</span><br><span class="line">         &quot;9001&quot;:&quot;password1&quot;,</span><br><span class="line">         &quot;9002&quot;:&quot;password2&quot;,</span><br><span class="line">         &quot;9003&quot;:&quot;password3&quot;,</span><br><span class="line">         &quot;9004&quot;:&quot;password4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;your_encryption_method&quot;,</span><br><span class="line">    &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用命令：<br>启动：/etc/init.d/shadowsocks start</p><p>停止：/etc/init.d/shadowsocks stop</p><p>重启：/etc/init.d/shadowsocks restart</p><p>状态：/etc/init.d/shadowsocks status</p><p>以上引用自 &gt; <a href="http://www.wangchao.info/1148.html" target="_blank" rel="noopener">http://www.wangchao.info/1148.html</a> 有改动</p><p>三、 KCPTun加速</p><p>搭建好了Shadowsocks相当于搭建成功了梯子，但是梯子太长，即时梯子带宽足够宽，线路质量也是不忍直视，此时就需要KCPTun了。</p><p>KCPTun是一个使用可信UDP来加速TCP传输速度的网络软件。</p><p>KCP 是一个快速可靠协议，能以比 TCP浪费10%-20%的带宽的代价，换取平均延迟降低 30%-40%，且最大延迟降低三倍的传输效果。</p><ol><li>首先需要确认一下加速地址，大部分不能加速是因为加速地址配置错误</li></ol><p>首先找到Shadowsocks端口，如8388，然后再命令行输入一下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nl | grep 8388</span><br></pre></td></tr></table></figure><p>如果提示以上命令不存在，则输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss -nl | grep 8388</span><br></pre></td></tr></table></figure><p>然后你会看到类似下面的输出（着重看显示为红色的部分）：</p><p>情况一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcp6       0      0     :::8388                 :::*                    LISTEN     </span><br><span class="line">udp6       0      0     :::8388                 :::*</span><br></pre></td></tr></table></figure><p>情况二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcp       0      0     127.0.0.1:8388                 :::*              LISTEN     </span><br><span class="line">udp       0      0     127.0.0.1:8388                 :::*</span><br></pre></td></tr></table></figure><p>情况三：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcp       0      0     0.0.0.0:8388                 :::*                    LISTEN     </span><br><span class="line">udp       0      0     0.0.0.0:8388                 :::*</span><br></pre></td></tr></table></figure><p>情况四：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcp       0      0     10.10.10.10:8388                 :::*                 LISTEN     </span><br><span class="line">udp       0      0     10.10.10.10:8388                 :::*</span><br></pre></td></tr></table></figure><p>情况五：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">udp    UNCONN     0      0         *:1080                  *:*                  </span><br><span class="line">tcp    LISTEN     0      128       *:1080                  *:*</span><br></pre></td></tr></table></figure><p>若为情况1、情况2、情况5和情况3，那么你的加速地址可以为：加速 IP 127.0.0.1，加速端口 8388（你的 Shadowsocks 端口）</p><p>若为情况4，那么你的加速地址为：加速IP 10.10.10.10（你的服务器IP），加速端口8388（你的 Shadowsocks 端口）</p><ol start="2"><li>Kcptun 一键安装脚本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O kcptun.sh https://github.com/kuoruan/shell-scripts/raw/master/kcptun/kcptun.sh</span><br><span class="line">sh kcptun.sh</span><br></pre></td></tr></table></figure><p>同样也需要一些自定义配置,其中的加速IP按上面说的填写。</p><blockquote><p>注： 填写完成后会提示按任意键继续和CTRL+C退出，此时要按任意键</p><p>如果安装成功，应该能看到如下信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&gt; 恭喜, Kcptun 服务端配置完毕！</span><br><span class="line">&gt;  </span><br><span class="line">&gt; 正在获取当前安装的 Kcptun 版本...</span><br><span class="line">&gt;  </span><br><span class="line">&gt; 服务器IP:  10.10.10.10</span><br><span class="line">&gt; 端口:  29900</span><br><span class="line">&gt; 加速地址: 127.0.0.1:8388</span><br><span class="line">&gt; 密码: 123456</span><br><span class="line">&gt; 加密方式 Crypt:  salsa20</span><br><span class="line">&gt;  </span><br><span class="line">&gt; 当前安装的 Kcptun 版本为: v20160922</span><br><span class="line">&gt;  </span><br><span class="line">&gt; 推荐的客户端配置为: </span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;   &quot;localaddr&quot;: &quot;:8388&quot;,</span><br><span class="line">&gt;   &quot;remoteaddr&quot;: &quot;10.10.10.10:29900&quot;,</span><br><span class="line">&gt;   &quot;key&quot;: &quot;123456&quot;,</span><br><span class="line">&gt;   &quot;crypt&quot;: &quot;salsa20&quot;,</span><br><span class="line">&gt;   &quot;mode&quot;: &quot;fast&quot;,</span><br><span class="line">&gt;   &quot;mtu&quot;: 1350,</span><br><span class="line">&gt;   &quot;sndwnd&quot;: 1024,</span><br><span class="line">&gt;   &quot;rcvwnd&quot;: 1024,</span><br><span class="line">&gt;   &quot;datashard&quot;: 10,</span><br><span class="line">&gt;   &quot;parityshard&quot;: 3,</span><br><span class="line">&gt;   &quot;dscp&quot;: 0,</span><br><span class="line">&gt;   &quot;conn&quot;: 1,</span><br><span class="line">&gt;   &quot;autoexpire&quot;: 60,</span><br><span class="line">&gt;   &quot;nocomp&quot;: false</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;  </span><br><span class="line">&gt; 手机端参数可以使用：</span><br><span class="line">&gt;   *******</span><br><span class="line">&gt;  </span><br><span class="line">&gt; 其他参数请自行计算或设置, 详细信息可以查看: https://github.com/xtaci/kcptun</span><br><span class="line">&gt;  </span><br><span class="line">&gt; Kcptun 安装目录: /usr/share/kcptun</span><br><span class="line">&gt; Kcptun 日志文件目录: /var/log/kcptun/</span><br></pre></td></tr></table></figure><p>请将以上的提示信息复制保存下来，后面配置客户端会用到这些提示信息。<br>注意：服务端的 sndwnd 对应的是客户端的 recwnd，所以请不要问我为什么输出的客户端参数和你配置的服务端参数是反的。</p><p>安装之后，Kcptun 服务交由 Supervisor 管理。</p><p>Supervisor 相关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service supervisord &#123;start|stop|restart|status&#125;</span><br></pre></td></tr></table></figure><p>Kcptun 相关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl &#123;start|stop|restart|status&#125; kcptun</span><br></pre></td></tr></table></figure><p>Supervisor 启动的时候会同时启动 Kcptun，运行 kcptun 相关命令时先确保 Supervisor 已启动。</p><p>四、客户端配置（windows，没有mac）</p><ol><li>先下载一个Kcptun工具.按照kcptun执行完成以后保存的信息填入Kcptun中相关的位置</li><li>下载Shadowsocks，填写相关信息，注意：其中的密码和加密方式一定要与服务器shadowsocks配置的相同，否则不能联网。</li></ol><p>到此位止，我的VPN就搭建好了，试一下可以访问谷歌而且很稳定。</p><p>在vultr上是按照时间付钱的，可以在不用的时候删掉服务器，不再扣钱。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;出于程序员的本能，我尝试在外网上搭建了一个VPN（搭建成功后就删除了，证明自己搭建成功过就满足了），现在记录一下步骤&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一、 购买服务器 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;经过筛选，我选择了vultr服务器，每月5美元，建议地址选
      
    
    </summary>
    
    
      <category term="vps搭建shadowsocks" scheme="http://www.litede.cn/categories/vps%E6%90%AD%E5%BB%BAshadowsocks/"/>
    
    
      <category term="vps搭建shadowsocks" scheme="http://www.litede.cn/tags/vps%E6%90%AD%E5%BB%BAshadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>搭建dubbo服务</title>
    <link href="http://www.litede.cn/2019/10/06/%E6%90%AD%E5%BB%BAdubbo%E6%9C%8D%E5%8A%A1/"/>
    <id>http://www.litede.cn/2019/10/06/搭建dubbo服务/</id>
    <published>2019-10-06T01:46:47.000Z</published>
    <updated>2019-10-06T02:09:33.385Z</updated>
    
    <content type="html"><![CDATA[<p>dubbo目录结构如图所示：<br><img src="https://img-blog.csdnimg.cn/20191006094911275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>生产者为服务的被调用方<br>生产者为服务的调用方</strong><br><strong>API为生产者和消费者中间的桥梁</strong>，这个是必不可少的。原因：</p><ol><li>如果没有API的话，消费者需要将生产者的包导入到本地仓库，这样就相当于把生产者的代码放到了本地，不符合微服务的理念</li><li>假如没有API的话，消费者需要将生产者的包导入到本地仓库，如果此时生产者的代码发生了变化，消费者必须每次手动清楚生产者的包进行重新导包，这样的设计是非常垃圾的。</li><li>假如有API的话，我们通过API远程调用生产者的接口，这样不管生产者的代码怎么变化，我们都是通过API调用的最新的代码。这种设计是才是合理的。<br>一、POM。xml</li><li>根 pom.xml</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.fengqi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dubboDemo&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;consumers&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;api&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;providers&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.6.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">        &lt;revision&gt;2.7.1&lt;/revision&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>providers pom.xml</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;dubboDemo&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.fengqi&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;providers&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;dubbo.version&gt;2.7.3&lt;/dubbo.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;dubbo.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;revision&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dubbo-dependencies-zookeeper&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;dubbo.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fengqi&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>consumers pom.xml</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;dubboDemo&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.fengqi&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;consumers&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;dubbo.version&gt;2.7.3&lt;/dubbo.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;dubbo.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;revision&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dubbo-dependencies-zookeeper&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;dubbo.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fengqi&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>api pom.xml</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;dubboDemo&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.fengqi&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>二、 resources</p><ol><li>providers application.yml</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: providers</span><br><span class="line">dubbo:</span><br><span class="line">  scan:</span><br><span class="line">    base-packages: com.fengqi.providers.service</span><br><span class="line">  protocol:</span><br><span class="line">    name: dubbo</span><br><span class="line">    port: <span class="number">9010</span></span><br><span class="line">  registry:</span><br><span class="line">    address: zookeeper:<span class="comment">//39.105.132.36:$&#123;embedded.zookeeper.port&#125;</span></span><br><span class="line">    file: $&#123;user.home&#125;/dubbo-cache/$&#123;spring.application.name&#125;/dubbo.cache</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8282</span></span><br><span class="line">demo:</span><br><span class="line">  service:</span><br><span class="line">    version: <span class="number">1.0</span>.0</span><br><span class="line">embedded:</span><br><span class="line">  zookeeper:</span><br><span class="line">    port: <span class="number">2181</span></span><br></pre></td></tr></table></figure><ol start="2"><li>consumers application.yml</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: consumers</span><br><span class="line"></span><br><span class="line">demo:</span><br><span class="line">  service:</span><br><span class="line">    version: <span class="number">1.0</span>.0</span><br><span class="line"></span><br><span class="line">embedded:</span><br><span class="line">  zookeeper:</span><br><span class="line">    port: <span class="number">2181</span></span><br><span class="line"></span><br><span class="line">dubbo:</span><br><span class="line">  registry:</span><br><span class="line">    address: zookeeper:<span class="comment">//39.105.132.36:$&#123;embedded.zookeeper.port&#125;</span></span><br><span class="line">    file: $&#123;user.home&#125;/dubbo-cache/$&#123;spring.application.name&#125;/dubbo.cache</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8281</span></span><br></pre></td></tr></table></figure><p>注： api不需要yml</p><p>三.、代码</p><ol><li>providers</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.fengqi.providers.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fengqi.api.ApiService;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(version = <span class="string">"1.0.0"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiServiceImpl</span> <span class="keyword">implements</span> <span class="title">ApiService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;dubbo.application.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serviceName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"[%s] : Hello, %s"</span>, serviceName, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>consumers</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fengqi.consumers.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fengqi.api.ApiService;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumersController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span>(version = <span class="string">"1.0.0"</span>)</span><br><span class="line">    <span class="keyword">private</span> ApiService apiService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProviders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> apiService.sayHello(<span class="string">"李特"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>api</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fengqi.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApiService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，一个多module的dubbo服务就已经完成了 ，运行看一下吧。</p><p>项目地址： <a href="https://github.com/litete/dubbo-zookeeper-demo.git" target="_blank" rel="noopener">https://github.com/litete/dubbo-zookeeper-demo.git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dubbo目录结构如图所示：&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191006094911275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shad
      
    
    </summary>
    
    
      <category term="dubbo" scheme="http://www.litede.cn/categories/dubbo/"/>
    
    
      <category term="dubbo" scheme="http://www.litede.cn/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Idea远程一键部署springboot到Docker</title>
    <link href="http://www.litede.cn/2019/10/06/Idea%E8%BF%9C%E7%A8%8B%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2springboot%E5%88%B0Docker/"/>
    <id>http://www.litede.cn/2019/10/06/Idea远程一键部署springboot到Docker/</id>
    <published>2019-10-06T01:09:39.000Z</published>
    <updated>2019-10-06T01:33:43.626Z</updated>
    
    <content type="html"><![CDATA[<p>**</p><h2 id="Idea是Java开发利器，springboot是Java生态中最流行的微服务框架，docker是时下最火的容器技术，那么它们结合在一起会产生什么化学反应呢？"><a href="#Idea是Java开发利器，springboot是Java生态中最流行的微服务框架，docker是时下最火的容器技术，那么它们结合在一起会产生什么化学反应呢？" class="headerlink" title="Idea是Java开发利器，springboot是Java生态中最流行的微服务框架，docker是时下最火的容器技术，那么它们结合在一起会产生什么化学反应呢？"></a>Idea是Java开发利器，springboot是Java生态中最流行的微服务框架，docker是时下最火的容器技术，那么它们结合在一起会产生什么化学反应呢？</h2><p>**</p><h2 id="一、-开发前准备"><a href="#一、-开发前准备" class="headerlink" title="一、 开发前准备"></a>一、 开发前准备</h2><ol><li><p>Docker的安装可以参考<a href="https://docs.docker.com/install/" target="_blank" rel="noopener">https://docs.docker.com/install/</a></p></li><li><p>配置docker远程连接端口</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><p>找到 ExecStart，在最后面添加 -H tcp://0.0.0.0:2375，如下图所示<br><img src="https://img-blog.csdnimg.cn/20191006091149961.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="3"><li>重启docker</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><ol start="4"><li>开放端口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=<span class="keyword">public</span> --add-port=<span class="number">2375</span>/tcp --permanent</span><br></pre></td></tr></table></figure><ol start="5"><li>Idea安装<strong>docker</strong>插件,重启<br><img src="https://img-blog.csdnimg.cn/20191006091416311.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>连接远程docker<br>(1) 编辑配置<br><img src="https://img-blog.csdnimg.cn/2019100609145883.jpg" alt="在这里插入图片描述"><br>(2) 填远程docker地址<br><img src="https://img-blog.csdnimg.cn/20191006091526731.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(3) 连接成功，会列出远程docker容器和镜像<br><img src="https://img-blog.csdnimg.cn/20191006091552984.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><h2 id="二、新建项目"><a href="#二、新建项目" class="headerlink" title="二、新建项目"></a>二、新建项目</h2><ol><li>创建springboot项目</li></ol><p>项目结构图<br><img src="https://img-blog.csdnimg.cn/20191006091643540.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(1) 配置pom文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.fengqi&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;dockerDemo&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.fengqi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;web&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;web&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</span><br><span class="line">                    &lt;resources&gt;</span><br><span class="line">                        &lt;resource&gt;</span><br><span class="line">                            &lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class="line">                            &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">                            &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class="line">                        &lt;/resource&gt;</span><br><span class="line">                    &lt;/resources&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">                        &lt;configuration&gt;</span><br><span class="line">                            &lt;tasks&gt;</span><br><span class="line">                                &lt;copy todir="src/main/docker" file="target/$&#123;project.artifactId&#125;-$&#123;project.version&#125;.$&#123;project.packaging&#125;"&gt;&lt;/copy&gt;</span><br><span class="line">                            &lt;/tasks&gt;</span><br><span class="line">                        &lt;/configuration&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;run&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure><p>(2) 在src/main目录下创建docker目录，并创建Dockerfile文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line">ADD *.jar app.jar</span><br><span class="line">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span><br></pre></td></tr></table></figure><p>(3) 在resource目录下创建application.properties文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logging.config=classpath:logback.xml</span><br><span class="line">logging.path=/home/developer/app/logs/</span><br><span class="line">server.port=<span class="number">8990</span></span><br></pre></td></tr></table></figure><p>(4) 创建DockerApplication文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DockerApplication</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> SpringApplication.run(DockerApplication.class, args);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(5) 创建DockerController文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DockerController</span> </span>&#123;</span><br><span class="line"> <span class="keyword">static</span> Log log = LogFactory.getLog(DockerController.class);</span><br><span class="line"> <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> log.info(<span class="string">"Hello Docker!"</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">"Hello Docker!"</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(6) 增加配置<br><img src="https://img-blog.csdnimg.cn/20191006091954238.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191006092002910.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>命令解释<br>Image tag : 指定镜像名称和tag，镜像名称为 docker-demo，tag为1.1<br>Bind ports : 绑定宿主机端口到容器内部端口。格式为[宿主机端口]:[容器内部端口]<br>Bind mounts : 将宿主机目录挂到到容器内部目录中。格式为[宿主机目录]:[容器内部目录]。这个springboot项目会将日志打印在容器 /home/developer/app/logs/ 目录下，将宿主机目录挂载到容器内部目录后，那么日志就会持久化容器外部的宿主机目录中。</strong></p><p>(7) Maven打包<br><img src="https://img-blog.csdnimg.cn/20191006092051828.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(8) 运行<br><img src="https://img-blog.csdnimg.cn/20191006092345561.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191006092407773.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这里我们可以看到镜像名称为docker-demo:1.1，docker容器为docker-server</p><blockquote><p>参考<a href="https://www.toutiao.com/i6702260511217549832/" target="_blank" rel="noopener">https://www.toutiao.com/i6702260511217549832/</a> 文章，有改动</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;**&lt;/p&gt;
&lt;h2 id=&quot;Idea是Java开发利器，springboot是Java生态中最流行的微服务框架，docker是时下最火的容器技术，那么它们结合在一起会产生什么化学反应呢？&quot;&gt;&lt;a href=&quot;#Idea是Java开发利器，springboot是Java生态
      
    
    </summary>
    
    
      <category term="docker" scheme="http://www.litede.cn/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.litede.cn/tags/docker/"/>
    
      <category term="SpringBoot" scheme="http://www.litede.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot读取外部配置文件</title>
    <link href="http://www.litede.cn/2019/10/05/SpringBoot%E8%AF%BB%E5%8F%96%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://www.litede.cn/2019/10/05/SpringBoot读取外部配置文件/</id>
    <published>2019-10-05T08:26:07.000Z</published>
    <updated>2019-10-05T08:52:00.039Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有时候项目打包成一个jar 或者war ,通过java -jar 命令运行springboot 项目，因为springboot<br>项目有自己的application.properties<br>配置文件，但是我们打完包之后，它也会打到包里边，倒是也能打开压缩包修改properties 文件，但是也是较为麻烦。</p><p>现在有如下需求，比如客户需要在很多个服务器部署一套项目，但是它们的数据库连接不一样，我们不能针对于这么多服务器，多次打包，很恶心，当然可以打完包，复制一堆，分别修改压缩包里边的配置文件。</p><p>springboot 有读取外部配置文件的方法，如下优先级：</p><p>第一种是在jar包的同一目录下建一个config文件夹，然后把配置文件放到这个文件夹下。</p><p>第二种是直接把配置文件放到jar包的同级目录。</p><p>第三种在classpath下建一个config文件夹，然后把配置文件放进去。</p><p>第四种是在classpath下直接放配置文件。</p><p>看到如上的优先级了吗？也就是说springboot<br>默认是优先读取它本身同级目录下的一个config/application.properties<br>文件的。我们通常在src/main/resources 文件夹下创建的application.properties<br>文件的优先级竟然是最低的！！！。</p></blockquote><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><ol><li>新建Project（本人使用的是IDEA），很简单，此处不再赘述。</li><li>在项目根目录下新建config文件夹</li><li>在config文件夹下新建application.properties或application.yml文件<br>如图所示：<br><img src="https://img-blog.csdnimg.cn/20191005163459624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVkZQ==,size_16,color_FFFFFF,t_70" alt="如图所示"></li></ol><hr><p> 此处的优先级大于src目录下的application.yml文件. 我们可以把一些公共的配置文件代码放置到此处，这样就达到配置文件代码解耦合的目的了</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;有时候项目打包成一个jar 或者war ,通过java -jar 命令运行springboot 项目，因为springboot&lt;br&gt;项目有自己的application.properties&lt;br&gt;配置文件，但是我们打完包之后，它也会打到包里边，倒
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://www.litede.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://www.litede.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo和Gitpage搭建博客(二)</title>
    <link href="http://www.litede.cn/2019/09/20/Hexo%E4%BD%BF%E7%94%A8Next%E4%B8%BB%E9%A2%98/"/>
    <id>http://www.litede.cn/2019/09/20/Hexo使用Next主题/</id>
    <published>2019-09-20T09:30:57.000Z</published>
    <updated>2019-09-20T10:05:21.061Z</updated>
    
    <content type="html"><![CDATA[<p>在进行了<strong><a href="http://www.litede.cn/2019/09/20/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGitpage%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/">Hexo和GitPage搭建博客</a>之后需要将本地博客推送到GitPage上，具体操作下面在文章内介绍。</strong></p><h2 id="一、注册Github"><a href="#一、注册Github" class="headerlink" title="一、注册Github"></a>一、注册Github</h2><p>&emsp;&emsp;首先如果你还没有 Github 账号的先注册一个，此处不赘述</p><hr><h2 id="二、创建仓库"><a href="#二、创建仓库" class="headerlink" title="二、创建仓库"></a>二、创建仓库</h2><p>点击 Start project 或者下面的 new repository 创建一个新的仓库</p><p><img src="/images/%E5%88%9B%E5%BB%BAgithub%E4%BB%93%E5%BA%93.png" alt><br>注：由于我已经有相同的仓库名了 所以此处会报错，请忽略此错误</p><p>安装 Hexo 完成后，再执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init myBlog</span><br><span class="line">cd myBlog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>注：myBlog为文件夹的名字 可根据自己的需求修改</p><h2 id="三、配置SSH-Key"><a href="#三、配置SSH-Key" class="headerlink" title="三、配置SSH Key"></a>三、配置SSH Key</h2><p>要使用 git 工具首先要配置一下SSH key，为部署本地博客到 Github 做准备。<br>如有需要请自行Google，此处不再赘述</p><h2 id="四、部署到Github"><a href="#四、部署到Github" class="headerlink" title="四、部署到Github"></a>四、部署到Github</h2><p>此时，本地和Github的工作做得差不了，是时候把它们两个连接起来了。</p><ul><li>第一：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）<br><img src="/images/github%E5%90%8D%E7%A7%B0.jpg" alt><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: git@github.com:@@@/@@@.github.io.git</span><br></pre></td></tr></table></figure></li></ul><p>注： @@@/@@@ 需要修改为自己的链接</p><ul><li>第二：要安装一个部署插件 hexo-deployer-git。</li></ul><p><code>npm install hexo-deployer-git --save</code></p><p>最后执行以下命令就可以部署上传啦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>命令提示：</p><p><code>hexo g</code> 生成环境<br><code>hexo d</code> 部署环境<br><code>hexo s</code> 启动服务预览</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在进行了&lt;strong&gt;&lt;a href=&quot;http://www.litede.cn/2019/09/20/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGitpage%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/&quot;&gt;Hexo和Gi
      
    
    </summary>
    
    
      <category term="Hexo+GitPage" scheme="http://www.litede.cn/categories/Hexo-GitPage/"/>
    
    
      <category term="Hexo+GitPage" scheme="http://www.litede.cn/tags/Hexo-GitPage/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo和Gitpage搭建博客(一)</title>
    <link href="http://www.litede.cn/2019/09/20/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGitpage%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.litede.cn/2019/09/20/使用Hexo和Gitpage搭建博客/</id>
    <published>2019-09-20T08:29:50.000Z</published>
    <updated>2019-09-20T10:05:17.799Z</updated>
    
    <content type="html"><![CDATA[<p><strong>作为一个程序员，个人博客可以说是不可或缺的。它可以记录自己技术成长的过程，也可以供别人参考、给他人提供方便，还可以锻炼自己的表达能力等等。这几年陆陆续续的在很多地方写过博客（CSDN、个人服务器），但是都有一些缺陷，所以最后决定用GitPage作为自己博客的新起点</strong></p><blockquote><p>Github Page 是 Github 提供的一种免费的静态网页托管服务（所以想想免费的空间不用也挺浪费的哈哈哈），可以用来托管博客、项目官网等静态网页。支持 Jekyll、Hugo、Hexo 编译静态资源，这次我们的主角就是 Hexo 了，具体的内容下面在文章内介绍。</p></blockquote><h2 id="一、准备环境"><a href="#一、准备环境" class="headerlink" title="一、准备环境"></a>一、准备环境</h2><p>&emsp;&emsp;1.node.js<br>&emsp;&emsp;2.git<br><strong>安装非常简单 此处不再赘述</strong><br>&emsp;&emsp;安装验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git version</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><hr><h2 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h2><p>在命令行输入执行以下命令：</p><p><code>npm install -g hexo-cli</code></p><p>安装 Hexo 完成后，再执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init myBlog</span><br><span class="line">cd myBlog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>注：myBlog为文件夹的名字 可根据自己的需求修改</p><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。 </span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds # 模版文件夹</span><br><span class="line">├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹</span><br><span class="line">|   ├── _drafts # 草稿文件</span><br><span class="line">|   └── _posts # 文章Markdowm文件 </span><br><span class="line">└── themes  # 主题文件夹</span><br></pre></td></tr></table></figure><p>好了，如果上面的命令都没报错的话，就恭喜了，运行 hexo s 命令，其中 s 是 server 的缩写，在浏览器中输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 回车就可以预览效果了。<br><code>hexo s</code></p><p>以下是我本地的预览效果，更换了 next 主题的，默认不是这个主题。<br><img src="/images/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%88%AA%E5%9B%BE.png" alt="个人博客截图" title="个人博客截图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;作为一个程序员，个人博客可以说是不可或缺的。它可以记录自己技术成长的过程，也可以供别人参考、给他人提供方便，还可以锻炼自己的表达能力等等。这几年陆陆续续的在很多地方写过博客（CSDN、个人服务器），但是都有一些缺陷，所以最后决定用GitPage作为自己博客的
      
    
    </summary>
    
    
      <category term="Hexo+GitPage" scheme="http://www.litede.cn/categories/Hexo-GitPage/"/>
    
    
      <category term="Hexo+GitPage" scheme="http://www.litede.cn/tags/Hexo-GitPage/"/>
    
  </entry>
  
</feed>
